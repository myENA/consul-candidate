package consultant_test

import (
	"fmt"
	"math/rand"
	"strings"
	"sync"
	"testing"

	"github.com/hashicorp/consul/api"
	cst "github.com/hashicorp/consul/sdk/testutil"
	"github.com/myENA/consultant/v2"
)

const (
	slugErr      = "!ERR!"
	slugField    = "!FIELD!"
	slugTestName = "!TESTNAME!"
	slugValue    = "!VALUE!"

	testNounLen = 1000
)

// sourced from http://www.desiquintans.com/downloads/nounlist/nounlist.txt
var testUtilNouns = [1000]string{
	"aardvark",
	"abacus",
	"abbey",
	"abdomen",
	"ability",
	"abolishment",
	"abroad",
	"abuse",
	"accelerant",
	"accelerator",
	"access",
	"accident",
	"accommodation",
	"accompanist",
	"artichoke",
	"article",
	"artificer",
	"ascot",
	"ash",
	"ashram",
	"ashtray",
	"aside",
	"ask",
	"asparagus",
	"aspect",
	"asphalt",
	"assignment",
	"assist",
	"assistance",
	"assistant",
	"associate",
	"association",
	"assumption",
	"asterisk",
	"astrakhan",
	"astrolabe",
	"astrologer",
	"astrology",
	"astronomy",
	"atelier",
	"athlete",
	"athletics",
	"atmosphere",
	"atom",
	"atrium",
	"attachment",
	"attack",
	"attempt",
	"attendant",
	"attention",
	"attenuation",
	"attic",
	"attitude",
	"attorney",
	"attraction",
	"blight",
	"blind",
	"blinker",
	"blister",
	"blizzard",
	"block",
	"blocker",
	"blood",
	"bloodflow",
	"bloom",
	"bloomers",
	"blossom",
	"blouse",
	"blow",
	"blowgun",
	"blowhole",
	"blue",
	"blueberry",
	"boar",
	"board",
	"boat",
	"boat-building",
	"boatload",
	"boatyard",
	"bobcat",
	"body",
	"bog",
	"bolero",
	"bolt",
	"bomb",
	"bomber",
	"bondsman",
	"bone",
	"bongo",
	"bonnet",
	"bonsai",
	"bonus",
	"boogeyman",
	"book",
	"bookcase",
	"bookend",
	"booklet",
	"booster",
	"boot",
	"bootee",
	"bootie",
	"boots",
	"booty",
	"border",
	"bore",
	"bosom",
	"boss",
	"botany",
	"bother",
	"bottle",
	"bottling",
	"bottom",
	"bottom-line",
	"boudoir",
	"bough",
	"boundary",
	"bow",
	"bower",
	"bowl",
	"bowler",
	"bowling",
	"bowtie",
	"box",
	"cello",
	"celsius",
	"cement",
	"cemetery",
	"cenotaph",
	"census",
	"cent",
	"center",
	"centimeter",
	"centurion",
	"century",
	"cephalopod",
	"ceramic",
	"cereal",
	"certification",
	"cesspool",
	"chafe",
	"chain",
	"chainstay",
	"chair",
	"chairlift",
	"chairman",
	"chairperson",
	"chaise",
	"chalet",
	"chalice",
	"chalk",
	"challenge",
	"champion",
	"championship",
	"chance",
	"chandelier",
	"change",
	"channel",
	"chaos",
	"chap",
	"chapel",
	"chapter",
	"character",
	"chard",
	"charge",
	"charity",
	"charlatan",
	"charles",
	"charm",
	"chart",
	"chastity",
	"chasuble",
	"chateau",
	"chauffeur",
	"chauvinist",
	"check",
	"checkroom",
	"cheek",
	"cheetah",
	"chef",
	"chemical",
	"chemistry",
	"cheque",
	"cherries",
	"cherry",
	"chess",
	"chest",
	"chick",
	"chicken",
	"chicory",
	"chief",
	"chiffonier",
	"child",
	"childhood",
	"cost",
	"costume",
	"cot",
	"cottage",
	"cotton",
	"couch",
	"cougar",
	"cough",
	"council",
	"councilman",
	"councilor",
	"councilperson",
	"count",
	"counter",
	"counter-force",
	"countess",
	"country",
	"county",
	"couple",
	"courage",
	"course",
	"court",
	"cousin",
	"covariate",
	"cover",
	"coverall",
	"cow",
	"cowbell",
	"cowboy",
	"crab",
	"crack",
	"cracker",
	"crackers",
	"cradle",
	"craft",
	"craftsman",
	"crash",
	"crate",
	"cravat",
	"craw",
	"crawdad",
	"crayfish",
	"crayon",
	"crazy",
	"cream",
	"creative",
	"creator",
	"creature",
	"creche",
	"credenza",
	"credit",
	"creditor",
	"creek",
	"creme brulee",
	"crest",
	"crew",
	"crib",
	"cribbage",
	"cricket",
	"dolman",
	"dolphin",
	"domain",
	"donkey",
	"door",
	"doorknob",
	"doorpost",
	"dory",
	"dot",
	"double",
	"doubling",
	"doubt",
	"doubter",
	"downforce",
	"downgrade",
	"downtown",
	"draft",
	"drag",
	"dragon",
	"dragonfly",
	"dragster",
	"drain",
	"drake",
	"drama",
	"dramaturge",
	"draw",
	"drawbridge",
	"drawer",
	"drawing",
	"dream",
	"dredger",
	"dress",
	"dresser",
	"dressing",
	"drill",
	"drink",
	"drive",
	"driver",
	"driveway",
	"driving",
	"drizzle",
	"dromedary",
	"drop",
	"drug",
	"drum",
	"drummer",
	"fiber",
	"fiberglass",
	"fibre",
	"fiction",
	"fiddle",
	"field",
	"fifth",
	"fight",
	"fighter",
	"figure",
	"figurine",
	"file",
	"fill",
	"filly",
	"film",
	"filth",
	"final",
	"finance",
	"find",
	"finding",
	"fine",
	"finger",
	"fingernail",
	"finish",
	"finisher",
	"fir",
	"fire",
	"fireman",
	"fireplace",
	"firewall",
	"fish",
	"fishbone",
	"fisherman",
	"fishery",
	"fishing",
	"fishmonger",
	"fishnet",
	"fisting",
	"fix",
	"fixture",
	"flag",
	"flame",
	"flanker",
	"flare",
	"flash",
	"flat",
	"flatboat",
	"flavor",
	"flax",
	"fleck",
	"fleece",
	"flesh",
	"flight",
	"flintlock",
	"flip-flops",
	"flock",
	"flood",
	"floor",
	"floozie",
	"grab",
	"grab-bag",
	"grade",
	"grain",
	"gram",
	"grammar",
	"grand",
	"granddaughter",
	"grandfather",
	"grandmom",
	"grandmother",
	"grandson",
	"granny",
	"grape",
	"grapefruit",
	"graph",
	"graphic",
	"grass",
	"grasshopper",
	"grassland",
	"gratitude",
	"gray",
	"grease",
	"great",
	"great-grandfather",
	"great-grandmother",
	"greek",
	"green",
	"greenhouse",
	"grenade",
	"grey",
	"grief",
	"grill",
	"grip",
	"grit",
	"grocery",
	"ground",
	"group",
	"grouper",
	"grouse",
	"growth",
	"guarantee",
	"guard",
	"guess",
	"guest",
	"guestbook",
	"guidance",
	"guide",
	"guilt",
	"guilty",
	"guitar",
	"guitarist",
	"gum",
	"gumshoes",
	"gun",
	"gutter",
	"guy",
	"inflammation",
	"inflation",
	"influence",
	"information",
	"infusion",
	"inglenook",
	"ingrate",
	"initial",
	"initiative",
	"in-joke",
	"injury",
	"injustice",
	"ink",
	"in-laws",
	"inlay",
	"inn",
	"innervation",
	"innocence",
	"innocent",
	"input",
	"inquiry",
	"inscription",
	"insect",
	"inside",
	"insolence",
	"inspection",
	"inspector",
	"instance",
	"instruction",
	"instrument",
	"instrumentalist",
	"instrumentation",
	"insulation",
	"insurance",
	"insurgence",
	"intelligence",
	"intention",
	"interaction",
	"interactive",
	"interest",
	"interferometer",
	"interior",
	"interloper",
	"internal",
	"international",
	"internet",
	"interpreter",
	"intervenor",
	"interview",
	"interviewer",
	"intestine",
	"intestines",
	"introduction",
	"invention",
	"inventor",
	"inventory",
	"mammoth",
	"man",
	"management",
	"manager",
	"mandarin",
	"mandolin",
	"mangrove",
	"manhunt",
	"maniac",
	"manicure",
	"mankind",
	"manner",
	"manor",
	"mansard",
	"manservant",
	"mansion",
	"mantel",
	"mantle",
	"mantua",
	"manufacturer",
	"manx",
	"many",
	"map",
	"maple",
	"maraca",
	"maracas",
	"marble",
	"mare",
	"margin",
	"mariachi",
	"marimba",
	"mark",
	"market",
	"marketing",
	"marksman",
	"marriage",
	"marsh",
	"marshland",
	"marxism",
	"mascara",
	"mask",
	"mass",
	"massage",
	"master",
	"mastication",
	"mastoid",
	"mat",
	"match",
	"mate",
	"material",
	"math",
	"mathematics",
	"matter",
	"mattock",
	"mattress",
	"maximum",
	"maybe",
	"mayonnaise",
	"mayor",
	"meal",
	"meaning",
	"measles",
	"measure",
	"measurement",
	"oxen",
	"oxford",
	"oxygen",
	"oyster",
	"pace",
	"pacemaker",
	"pack",
	"package",
	"packet",
	"pad",
	"paddle",
	"paddock",
	"page",
	"pagoda",
	"pail",
	"pain",
	"paint",
	"painter",
	"painting",
	"paintwork",
	"pair",
	"pajama",
	"pajamas",
	"palm",
	"pamphlet",
	"pan",
	"pancake",
	"pancreas",
	"panda",
	"panic",
	"pannier",
	"panpipe",
	"pansy",
	"panther",
	"panties",
	"pantologist",
	"pantology",
	"pantry",
	"pants",
	"pantsuit",
	"panty",
	"pantyhose",
	"paper",
	"paperback",
	"parable",
	"parachute",
	"parade",
	"parallelogram",
	"paramedic",
	"parcel",
	"parchment",
	"pard",
	"parent",
	"parentheses",
	"park",
	"parka",
	"parking",
	"parrot",
	"parsnip",
	"part",
	"participant",
	"particle",
	"prosecution",
	"protection",
	"protest",
	"protocol",
	"prow",
	"pruner",
	"pseudoscience",
	"psychiatrist",
	"psychoanalyst",
	"psychologist",
	"psychology",
	"ptarmigan",
	"public",
	"publicity",
	"publisher",
	"pudding",
	"puddle",
	"puffin",
	"pull",
	"pulley",
	"puma",
	"pump",
	"pumpkin",
	"pumpkinseed",
	"punch",
	"punctuation",
	"punishment",
	"pupa",
	"pupil",
	"puppy",
	"purchase",
	"puritan",
	"purple",
	"purpose",
	"purse",
	"push",
	"pusher",
	"put",
	"pvc",
	"pyjama",
	"pyramid",
	"quadrant",
	"quail",
	"quality",
	"quantity",
	"quart",
	"quarter",
	"quartz",
	"queen",
	"question",
	"quicksand",
	"quiet",
	"quill",
	"quilt",
	"quince",
	"quit",
	"quiver",
	"quotation",
	"quote",
	"rabbi",
	"seal",
	"seaplane",
	"search",
	"seashore",
	"seaside",
	"season",
	"seat",
	"second",
	"secret",
	"secretariat",
	"secretary",
	"section",
	"sectional",
	"sector",
	"secure",
	"security",
	"seed",
	"seeder",
	"segment",
	"select",
	"selection",
	"self",
	"sell",
	"semicircle",
	"semicolon",
	"senator",
	"senior",
	"sense",
	"sensitive",
	"sentence",
	"sepal",
	"septicaemia",
	"series",
	"servant",
	"serve",
	"server",
	"service",
	"session",
	"set",
	"setting",
	"settler",
	"sewer",
	"sex",
	"shack",
	"shade",
	"shadow",
	"shadowbox",
	"shake",
	"shakedown",
	"shaker",
	"shallot",
	"shame",
	"shampoo",
	"shanty",
	"shape",
	"share",
	"shark",
	"sharon",
	"shawl",
	"she",
	"shearling",
	"shears",
	"sheath",
	"shed",
	"sheep",
	"steamroller",
	"steel",
	"steeple",
	"stem",
	"stencil",
	"step",
	"step-aunt",
	"step-brother",
	"stepdaughter",
	"step-daughter",
	"step-father",
	"step-grandfather",
	"step-grandmother",
	"stepmother",
	"step-mother",
	"stepping-stone",
	"steps",
	"step-sister",
	"stepson",
	"step-son",
	"step-uncle",
	"stew",
	"stick",
	"stiletto",
	"still",
	"stinger",
	"stitch",
	"stock",
	"stocking",
	"stockings",
	"stock-in-trade",
	"stole",
	"stomach",
	"stone",
	"stonework",
	"stool",
	"stop",
	"stopsign",
	"stopwatch",
	"storage",
	"store",
	"storey",
	"storm",
	"story",
	"storyboard",
	"story-telling",
	"stove",
	"strain",
	"strait",
	"surname",
	"surprise",
	"surround",
	"survey",
	"sushi",
	"suspect",
	"suspenders",
	"sustainment",
	"SUV",
	"swallow",
	"swamp",
	"swan",
	"swath",
	"sweat",
	"sweater",
	"sweats",
	"sweatshirt",
	"sweatshop",
	"sweatsuit",
	"swedish",
	"sweet",
	"sweets",
	"swell",
	"swim",
	"swimming",
	"swimsuit",
	"swing",
	"swiss",
	"switch",
	"switchboard",
	"swivel",
	"sword",
	"swordfish",
	"sycamore",
	"symmetry",
	"sympathy",
	"syndicate",
	"synergy",
	"synod",
	"syrup",
	"system",
	"tabby",
	"tabernacle",
	"table",
	"tablecloth",
	"tile",
	"till",
	"timbale",
	"timber",
	"time",
	"timeline",
	"timeout",
	"timer",
	"timpani",
	"tin",
	"tinderbox",
	"tinkle",
	"tintype",
	"tip",
	"tire",
	"tissue",
	"titanium",
	"title",
	"toad",
	"topic",
	"topsail",
	"toque",
	"torchiere",
	"toreador",
	"tornado",
	"torso",
	"tortellini",
	"tortoise",
	"tosser",
	"total",
	"tote",
	"touch",
	"tough",
	"tough-guy",
	"tour",
	"tourist",
	"towel",
	"tower",
	"town",
	"townhouse",
	"tow-truck",
	"umbrella",
	"unblinking",
	"uncle",
	"underclothes",
	"underground",
	"underneath",
	"underpants",
	"underpass",
	"undershirt",
	"understanding",
	"underwear",
	"underwire",
	"unemployment",
	"unibody",
	"uniform",
	"union",
	"unique",
	"unit",
	"unity",
	"university",
	"upper",
	"upstairs",
	"urn",
	"usage",
	"use",
	"user",
	"usher",
	"usual",
	"utensil",
	"vacation",
	"vacuum",
	"vagrant",
	"valance",
	"validity",
	"valley",
	"valuable",
	"value",
	"van",
	"vane",
	"vanity",
	"variation",
	"variety",
	"vase",
	"vast",
	"vault",
	"vaulting",
	"veal",
	"vegetable",
	"vegetarianism",
	"vegetation",
	"vehicle",
	"veil",
	"vein",
	"veldt",
	"waterskiing",
	"waterspout",
	"wave",
	"wax",
	"way",
	"weakness",
	"wealth",
	"weapon",
	"wear",
	"weasel",
	"weather",
	"web",
	"wedding",
	"wedge",
	"weed",
	"weeder",
	"weedkiller",
	"week",
	"weekend",
	"weekender",
	"weight",
	"weird",
	"welcome",
	"welfare",
	"well",
	"west",
	"western",
	"wet-bar",
	"wetsuit",
	"whale",
	"wharf",
	"wheat",
	"workbench",
	"worker",
	"workhorse",
	"working",
	"worklife",
	"workshop",
	"world",
	"worm",
	"worry",
	"worth",
	"worthy",
	"wound",
	"wrap",
	"wraparound",
	"wrecker",
	"wren",
	"wrench",
	"wrestler",
	"wrinkle",
	"wrist",
	"writer",
	"writing",
	"wrong",
	"xylophone",
	"yacht",
	"yak",
	"yam",
	"yard",
	"yarmulke",
	"yarn",
	"yawl",
	"year",
	"yeast",
	"yellow",
	"yesterday",
	"yew",
	"yin",
	"yoga",
	"yogurt",
	"yoke",
	"you",
	"young",
	"youth",
	"yurt",
	"zampone",
	"zebra",
	"zebrafish",
	"zephyr",
	"ziggurat",
	"zinc",
	"zipper",
	"zither",
	"zone",
	"zoo",
	"zoologist",
	"zoology",
	"zoot-suit",
	"zucchini",
}

func getTestLocalAddr(t *testing.T) string {
	var (
		addr string
		err  error
	)
	if addr, err = consultant.LocalAddress(); err != nil {
		t.Fatalf("Error calling LocalAddress(): %s", err)
		return ""
	}
	return addr
}

type tsp struct {
	err      error
	field    string
	value    interface{}
	testName string
}

func replaceTestSlugs(in string, p tsp) string {
	out := in
	if p.err != nil {
		out = strings.ReplaceAll(in, slugErr, p.err.Error())
	}
	out = strings.ReplaceAll(in, slugField, p.field)
	out = strings.ReplaceAll(in, slugValue, fmt.Sprintf("%v", p.value))
	out = strings.ReplaceAll(in, slugTestName, p.testName)
	return out
}

func makeTestServerConfigCallback(cb cst.ServerConfigCallback) cst.ServerConfigCallback {
	return func(c *cst.TestServerConfig) {
		c.NodeName = fmt.Sprintf("%s-%s", testUtilNouns[rand.Int63()%testNounLen], testUtilNouns[rand.Int63()%testNounLen])
		c.LogLevel = "ERR"
		if cb != nil {
			cb(c)
		}
	}
}

func makeTestServer(t *testing.T, cb cst.ServerConfigCallback) *cst.TestServer {
	server, err := cst.NewTestServerConfigT(t, makeTestServerConfigCallback(cb))
	if err != nil {
		t.Fatalf("Unable to initialize Consul agent server: %v", err)
	}

	return server
}

func stopTestServer(s *cst.TestServer) {
	_ = s.Stop()
}

func makeTestClient(t *testing.T, server *cst.TestServer) *consultant.Client {
	apiConf := api.DefaultConfig()
	apiConf.Address = server.HTTPAddr

	client, err := consultant.NewClient(apiConf)
	if err != nil {
		if err := server.Stop(); err != nil {
			t.Logf("error shutting down server: %s", err)
		}
		t.Fatalf("Unable to create client for server \"%s\": %v", apiConf.Address, err)
	}

	return client
}

func makeTestServerAndClient(t *testing.T, cb cst.ServerConfigCallback) (*cst.TestServer, *consultant.Client) {
	server := makeTestServer(t, cb)
	return server, makeTestClient(t, server)
}

type testConsulCluster struct {
	mu sync.RWMutex

	size    int
	servers []*cst.TestServer
	clients []*consultant.Client
}

func (c *testConsulCluster) Client(node int) *consultant.Client {
	c.mu.RLock()
	client := c.clients[node]
	c.mu.RUnlock()
	return client
}

func (c *testConsulCluster) Server(node int) *cst.TestServer {
	c.mu.RLock()
	server := c.servers[node]
	c.mu.RUnlock()
	return server
}

func (c *testConsulCluster) RandomClient() *consultant.Client {
	c.mu.RLock()
	client := c.clients[rand.Intn(len(c.clients))]
	c.mu.RUnlock()
	return client
}

func (c *testConsulCluster) Shutdown() {
	c.mu.Lock()

	for _, serv := range c.servers {
		_ = serv.Stop()
	}

	c.size = 0
	c.servers = make([]*cst.TestServer, 0)
	c.clients = make([]*consultant.Client, 0)

	c.mu.Unlock()
}

func makeTestCluster(t *testing.T, nodeCount int) (*testConsulCluster, error) {
	if 0 > nodeCount {
		t.Fatalf("nodeCount must be > 0, \"%d\" provided", nodeCount)
	}

	c := &testConsulCluster{
		size:    nodeCount,
		servers: make([]*cst.TestServer, nodeCount),
		clients: make([]*consultant.Client, nodeCount),
	}

	for i := 0; i < nodeCount; i++ {
		c.servers[i], c.clients[i] = makeTestServerAndClient(t, func(c *cst.TestServerConfig) {
			c.Performance.RaftMultiplier = 1
			c.DisableCheckpoint = false
			if 0 < i {
				c.Bootstrap = false
			}
		})
	}

	if 1 == nodeCount {
		return c, nil
	}

	for i := 1; i < nodeCount; i++ {
		c.servers[0].JoinLAN(t, c.servers[i].LANAddr)
	}

	return c, nil
}
